# !pip install numba pygltflib scikit-image open3d noise
import numpy as np
import pandas as pd
from skimage import measure
from pygltflib import GLTF2
from numba import jit
import open3d as o3d
from noise import pnoise3 

@jit(nopython=True)
def mandelbulb(x, y, z, max_iter):
    cx, cy, cz = x, y, z
    for i in range(max_iter):
        r = np.sqrt(x * x + y * y + z * z)
        theta = np.arccos(z / r)
        phi = np.arctan2(y, x)
        x = r ** 8 * np.sin(theta * 8) * np.cos(phi * 8) + cx
        y = r ** 8 * np.sin(theta * 8) * np.sin(phi * 8) + cy
        z = r ** 8 * np.cos(theta * 8) + cz
        if r > 2:
            return i
    return max_iter

resolution = 200 
max_iter = 100

X, Y, Z = np.mgrid[-1.5:1.5:complex(0, resolution), 
                   -1.5:1.5:complex(0, resolution), 
                   -1.5:1.5:complex(0, resolution)]
mandelbulb_values = np.zeros(X.shape, dtype=np.int32)

for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        for k in range(X.shape[2]):
            mandelbulb_values[i, j, k] = mandelbulb(X[i, j, k], Y[i, j, k], Z[i, j, k], max_iter)

verts, faces, normals, values = measure.marching_cubes(mandelbulb_values, level=max_iter / 4, spacing=(3.0 / (resolution - 1), 3.0 / (resolution - 1), 3.0 / (resolution - 1)))

vertex_colors = np.zeros((verts.shape[0], 3))

for i in range(verts.shape[0]):
    x, y, z = verts[i]
    r = 0.5 + 0.5 * pnoise3(x, y, z)
    g = 0.5 + 0.5 * pnoise3(x + 100, y + 100, z + 100)
    b = 0.5 + 0.5 * pnoise3(x + 200, y + 200, z + 200)
    vertex_colors[i] = [r, g, b]

verts = verts.astype(np.float64)
vertex_colors = vertex_colors.astype(np.float64)

np.set_printoptions(precision=15, suppress=True)

data = np.hstack((verts, vertex_colors))
df = pd.DataFrame(data, columns=['x', 'y', 'z', 'r', 'g', 'b'])

df.to_csv('vertices_and_colors.csv', index=False, float_format='%.15f')

mesh = o3d.geometry.TriangleMesh()
mesh.vertices = o3d.utility.Vector3dVector(verts)
mesh.triangles = o3d.utility.Vector3iVector(faces)
mesh.vertex_colors = o3d.utility.Vector3dVector(vertex_colors)

o3d.io.write_triangle_mesh("mesh.gltf", mesh)

gltf = GLTF2().load("mesh.gltf")
gltf.save("mesh.glb")
