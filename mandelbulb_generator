import numpy as np
import pandas as pd
from skimage import measure
from pygltflib import GLTF2, Scene, Node, Mesh, Buffer, BufferView, Accessor, Asset, Primitive
from numba import jit, prange
import open3d as o3d
import matplotlib.colors as mcolors

@jit(nopython=True, parallel=True)
def mandelbulb(x, y, z, max_iter):
    cx, cy, cz = x, y, z
    for i in range(max_iter):
        r = np.sqrt(x*x + y*y + z*z)
        theta = np.arccos(z / r)
        phi = np.arctan2(y, x)
        x = r**8 * np.sin(theta * 8) * np.cos(phi * 8) + cx
        y = r**8 * np.sin(theta * 8) * np.sin(phi * 8) + cy
        z = r**8 * np.cos(theta * 8) + cz
        if r > 2:
            return i
    return max_iter

resolution = 100  
max_iter = 100

X, Y, Z = np.mgrid[-1.5:1.5:complex(0, resolution), -1.5:1.5:complex(0, resolution), -1.5:1.5:complex(0, resolution)]
mandelbulb_values = np.zeros(X.shape, dtype=np.int32)

for i in prange(X.shape[0]):
    for j in prange(X.shape[1]):
        for k in prange(X.shape[2]):
            mandelbulb_values[i, j, k] = mandelbulb(X[i, j, k], Y[i, j, k], Z[i, j, k], max_iter)

verts, faces, normals, values = measure.marching_cubes(mandelbulb_values, level=max_iter / 4)

num_faces = faces.shape[0]
face_colors = np.random.rand(num_faces, 3)

vertex_colors = np.zeros((verts.shape[0], 3))

for i in range(faces.shape[0]):
    vertex_colors[faces[i]] = face_colors[i]

mesh = o3d.geometry.TriangleMesh()
mesh.vertices = o3d.utility.Vector3dVector(verts)
mesh.triangles = o3d.utility.Vector3iVector(faces)
mesh.vertex_colors = o3d.utility.Vector3dVector(vertex_colors)

o3d.io.write_triangle_mesh("mesh.gltf", mesh)

gltf = GLTF2().load("mesh.gltf")
gltf.save("mesh.glb")
