import numpy as np
import pandas as pd
from skimage import measure
from pygltflib import GLTF2, Scene, Node, Mesh, Buffer, BufferView, Accessor, Asset, Primitive
from numba import jit, prange
import open3d as o3d
from noise import pnoise3

@jit(nopython=True, parallel=True)
def menger_sponge(x, y, z, level):
    for l in range(level):
        if (x % 3 == 1 and y % 3 == 1) or (x % 3 == 1 and z % 3 == 1) or (y % 3 == 1 and z % 3 == 1):
            return 0
        x, y, z = x // 3, y // 3, z // 3
    return 1

resolution = 500  
level = 4  

X, Y, Z = np.mgrid[0:3**level:complex(0, resolution), 0:3**level:complex(0, resolution), 0:3**level:complex(0, resolution)]
menger_values = np.zeros(X.shape, dtype=np.int32)

for i in prange(X.shape[0]):
    for j in prange(X.shape[1]):
        for k in prange(X.shape[2]):
            menger_values[i, j, k] = menger_sponge(X[i, j, k], Y[i, j, k], Z[i, j, k], level)

verts, faces, normals, values = measure.marching_cubes(menger_values, level=0.5)

def generate_soft_colors(vertices):
    colors = np.zeros((vertices.shape[0], 3))
    for i in range(vertices.shape[0]):
        x, y, z = vertices[i]
        r = pnoise3(x * 0.1, y * 0.1, z * 0.1) * 0.5 + 0.5
        g = pnoise3(x * 0.1 + 10, y * 0.1 + 10, z * 0.1 + 10) * 0.5 + 0.5
        b = pnoise3(x * 0.1 + 20, y * 0.1 + 20, z * 0.1 + 20) * 0.5 + 0.5
        colors[i] = [r, g, b]
    return colors

vertex_colors = generate_soft_colors(verts)

mesh = o3d.geometry.TriangleMesh()
mesh.vertices = o3d.utility.Vector3dVector(verts)
mesh.triangles = o3d.utility.Vector3iVector(faces)
mesh.vertex_colors = o3d.utility.Vector3dVector(vertex_colors)

o3d.io.write_triangle_mesh("mesh.gltf", mesh)

gltf = GLTF2().load("mesh.gltf")
gltf.save("mesh.glb")
