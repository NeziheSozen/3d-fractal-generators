import numpy as np
import pandas as pd
from skimage import measure
from pygltflib import GLTF2
from numba import jit
import open3d as o3d
from noise import pnoise3 

@jit(nopython=True)
def julia3d(x, y, z, max_iter, cx, cy, cz):
    zx, zy, zz = x, y, z
    for i in range(max_iter):
        r = np.sqrt(zx * zx + zy * zy + zz * zz)
        if r > 2.0:
            return i
        zx, zy, zz = zx * zx - zy * zy - zz * zz + cx, 2 * zx * zy + cy, 2 * zx * zz + cz
    return max_iter

resolution = 200
max_iter = 200

cx, cy, cz = -0.7, 0.27015, 0.27015

X, Y, Z = np.mgrid[-1.5:1.5:complex(0, resolution), 
                   -1.5:1.5:complex(0, resolution), 
                   -1.5:1.5:complex(0, resolution)]
julia_values = np.zeros(X.shape, dtype=np.int32)

for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        for k in range(X.shape[2]):
            julia_values[i, j, k] = julia3d(X[i, j, k], Y[i, j, k], Z[i, j, k], max_iter, cx, cy, cz)

verts, faces, normals, values = measure.marching_cubes(julia_values, level=max_iter / 4, spacing=(3.0 / (resolution - 1), 3.0 / (resolution - 1), 3.0 / (resolution - 1)))

vertex_colors = np.zeros((verts.shape[0], 3))

for i in range(verts.shape[0]):
    x, y, z = verts[i]
    r = 0.5 + 0.5 * pnoise3(x, y, z)
    g = 0.5 + 0.5 * pnoise3(x + 100, y + 100, z + 100)
    b = 0.5 + 0.5 * pnoise3(x + 200, y + 200, z + 200)
    vertex_colors[i] = [r, g, b]

verts = verts.astype(np.float64)
vertex_colors = vertex_colors.astype(np.float64)

np.set_printoptions(precision=15, suppress=True)

data = np.hstack((verts, vertex_colors))
df = pd.DataFrame(data, columns=['x', 'y', 'z', 'r', 'g', 'b'])

df.to_csv('vertices_and_colors.csv', index=False, float_format='%.15f')

mesh = o3d.geometry.TriangleMesh()
mesh.vertices = o3d.utility.Vector3dVector(verts)
mesh.triangles = o3d.utility.Vector3iVector(faces)
mesh.vertex_colors = o3d.utility.Vector3dVector(vertex_colors)

o3d.io.write_triangle_mesh("mesh.gltf", mesh)

gltf = GLTF2().load("mesh.gltf")
gltf.save("mesh.glb")
